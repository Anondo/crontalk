// Code generated by go-bindata.
// sources:
// config.yml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4b\x4b\x1c\x4f\x10\xbf\xfb\x29\x9a\x3d\xfc\xcf\xff\xbc\x93\xbd\x09\x46\x82\xb0\xf1\xa0\x20\x39\x2d\xad\xdb\xfb\x88\x6b\x8f\xcc\x4e\x2b\x7b\xcb\x83\x64\x0f\x21\xe4\x24\x79\x10\x58\x02\xa6\xc7\xe8\xba\x8a\x87\x64\x03\x41\xbf\x4a\x7d\x94\x50\xd5\xd5\x3d\x0f\x67\xcd\x65\xa6\x1e\xbf\xaa\xae\xaa\xee\xfa\xf5\xa5\xee\x18\xd9\x51\xf5\x05\x21\x94\xee\xf4\x7b\x83\x2e\x8a\x42\xa8\x3d\x15\x0f\xeb\xa2\xf6\x18\xff\xa2\x96\xd9\x9a\x3b\x91\x4e\xba\xcd\xa8\x1d\x9c\x0d\x34\x88\xd5\x76\x01\xd5\x92\x18\x2d\x1c\x62\x49\x0e\x9d\x2f\xd2\x5a\xa0\x79\x55\x0b\x6f\xc8\xe7\x43\x7b\x29\x9b\x4c\x9a\x7c\x6c\x4f\x9b\x44\x21\x68\x31\xe1\xb4\x0d\x32\x55\xe2\x9a\x51\xbb\xd9\x8d\x4c\x5c\x81\xc7\xdc\x4f\x22\x13\xf3\x01\x2d\x39\x44\x70\xd2\x55\xcd\x7d\xa5\xb6\x31\x60\x49\x0e\x11\xb4\xde\x55\x62\x43\xa9\xed\xeb\x40\x2a\xb9\x84\x74\x75\x3b\xa8\x6f\x89\xc0\x43\x25\xa9\x8c\xd0\x18\xa2\x9f\x29\x19\x87\x0e\x05\x57\xc9\xba\x6e\xa1\xfe\x1f\xab\x49\x84\x5a\x12\xb1\xda\x8e\xa3\x1d\x34\xe0\x3f\x2b\xcc\xd7\xc2\xc7\x87\x51\x71\xc7\xce\xec\xe7\x91\x6b\x7e\x60\xb4\x8b\x5e\x23\x21\x54\xef\x8c\x8d\x28\x33\x26\x46\x0d\x9c\x75\xdd\x49\xce\xbc\xaf\x5a\xda\x3b\x36\xbc\xcc\x11\x5d\x13\xfb\x10\x16\x7d\x0b\x3d\x67\x5e\x26\x81\x2b\x91\x89\x89\xb9\x16\x16\x9d\xe3\xb9\xd4\x46\xd2\x53\x5c\x71\x12\x27\x51\x9b\x31\xdb\x97\x59\xe4\xea\x65\xbc\x85\x77\xd3\xc0\x3f\x4f\x74\x37\xee\xf5\xeb\xa2\xb6\x88\x7f\x8f\xa2\x06\xc3\x21\x46\xe3\xbc\x56\x8c\x56\xde\xd0\xa7\x23\x4d\x9f\x11\xd2\x74\xcc\x20\xc1\x24\x24\x70\xd1\x6a\x37\x51\x3b\x9b\x0a\xc7\xba\xe6\x65\x7e\xd8\x5b\x49\xe4\x1c\xab\x4e\x72\x66\x1d\xed\xf9\x80\xa7\x2c\xf2\x25\xaa\x2d\xef\x58\x62\x11\x1d\x9b\x52\x77\xfa\xb2\xb8\x92\x60\x8f\x21\x7d\x0f\xf6\x1c\xec\x21\xd8\xab\x79\xcb\x59\x86\x81\x9d\x82\xbd\x04\x3b\xab\x57\xec\x69\x09\x0c\xd6\xd2\xf7\xa8\xb8\xb6\x95\x3b\x5b\xce\x5b\xb1\xb1\x95\xa5\x60\x7a\xfa\x8e\x21\x1d\x55\x6f\x7b\x7e\x8b\xff\x91\x43\x80\xfd\x84\x0a\x42\xc6\x60\x2f\xeb\xf3\xd7\x1b\xec\x8c\x0a\x76\xf9\x0e\x49\xfe\x4d\x59\x0e\x44\x68\xfc\x86\xa5\x0f\x0d\xcf\x89\xa9\xdc\x7e\xb0\x13\x0a\x3a\xa7\x43\x7f\x85\x50\x4e\x55\xe4\x02\xca\x3d\x05\x7b\x06\xf6\x4f\x91\x15\xc0\x7e\xa0\x4c\xaf\x0a\xec\x00\xf6\x3b\xa4\x23\xb0\x07\xd9\x24\x99\x27\x0a\x0c\x11\x0a\xad\x97\x79\xa2\x34\xcc\x7a\x91\x30\xca\xa3\x2d\x71\x07\xdd\xc9\x84\x22\xb9\xc7\x12\x8f\x60\x3b\xe9\x3b\x3a\xa3\x00\xc8\x38\x85\x7c\x9f\xe9\x84\x8f\x60\x2f\x4a\xb8\x3c\xc9\xa0\x2b\x7d\x09\x36\x2d\xe7\xca\xd8\x86\x20\xaf\xe9\x4e\x67\x94\xf2\xd8\x3f\xea\x42\x44\xa0\x21\xb0\x3f\x29\xe5\x81\x7f\x5f\x05\x58\x8e\x98\x10\xc8\x23\x2a\x40\x32\x8a\x02\xfb\x95\x1c\x47\x94\x10\xaf\xcf\x5f\xfa\x0b\xac\x21\x1d\x5d\x23\x2f\xb0\x27\x74\x75\x13\x3e\xfc\xc6\x38\xcf\x6d\xfe\xd9\xb8\xc7\xf4\x25\xf8\x3d\xd1\xd1\x2b\x09\xeb\x72\x85\x13\xcd\x52\xf8\x79\x7b\x0b\x73\x1f\x96\x8e\x87\x1f\xe5\x1c\xfd\x61\xce\x71\x41\x47\x8e\x44\xbe\xa0\xc0\x8a\x60\xdf\xd2\xd5\xcd\xf8\x95\x78\x40\x9e\x21\xc9\x3b\xf2\x85\x8d\x49\x9e\x92\x3c\xa1\x56\x46\x65\xe6\x04\xfb\xc6\xdf\xca\x98\x1e\x50\x01\x97\xa3\x52\xba\x95\xd3\x79\x09\x73\xd4\x0a\xf6\x1b\xcd\x63\x36\x0f\xfb\x3f\x82\x52\xeb\x94\x5b\xa4\xa4\x4e\xb9\x4d\x0a\x13\xe2\x1d\x52\x7e\x38\xe5\x2e\x29\xc7\x4e\xb9\x47\xca\x89\x53\xee\x93\x32\x71\xca\x03\x52\x4e\x9d\xf2\x90\x94\xa9\x53\x1e\x91\x72\x56\x5b\xf8\x1b\x00\x00\xff\xff\xbd\xea\x07\x2a\x8e\x09\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 2446, mode: os.FileMode(420), modTime: time.Unix(1556086444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.yml": &bintree{configYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
