// Code generated by go-bindata.
// sources:
// config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcd\x6a\x14\x41\x10\xbe\xfb\x14\x4d\x0e\x3e\xc4\xde\x02\x31\x48\x20\xe6\x10\xc1\xe3\xd2\xd9\xed\xfd\x91\xd9\xee\x30\x3b\x1d\xd9\x9b\x3f\xe8\x1c\x24\x78\x0a\xfe\x20\x2c\x82\xd6\x2c\xba\xc6\x25\x07\x59\x41\x92\x57\xa9\x47\x91\xaa\xae\x9e\x3f\x27\x7a\x99\xa9\xae\xef\xeb\xaa\xea\xea\xfa\x3a\xd1\x76\xec\xf5\xd8\xf4\xee\x28\x65\xec\x38\x99\xce\x27\x64\x2a\x65\xce\x4c\xba\xe8\xa9\x9d\x7b\xf4\x57\x3b\x95\xaf\x3f\x73\x36\x9b\xf4\xdd\xa8\x04\x0f\xc9\xa1\x8e\x46\x0d\xd6\x50\xd3\x6e\x15\x18\x7b\x7a\x11\x30\x67\xad\x22\xf7\x91\x55\xd1\x51\x8f\x47\xfe\x56\x34\x9d\xf5\x25\xed\xd4\xfa\xcc\x10\x69\x37\x93\xb0\x87\xec\xea\xe4\xf5\xdd\xa8\x3f\x71\x3e\xed\xe0\x53\xec\xfb\xce\xa7\x65\x02\x25\x24\x59\xdb\x21\xad\xef\xca\x32\x73\xb4\xca\x9c\x2c\xe7\xde\x86\x93\x1d\xb3\x11\x9c\x33\x27\xce\x43\x57\x39\x33\x6f\xe6\xc1\xfb\x30\x58\xc1\xfd\xc4\x0c\x6d\x04\x1e\x45\x5b\x76\x4c\x7c\x1a\xb7\x88\x19\x80\x51\x3a\x0d\xee\x7d\x36\xa4\x12\x9d\xf9\x54\x6a\x11\x33\x00\x8f\xb5\xf5\x9a\xef\xee\x20\x58\x12\xc4\x9c\xa4\xe2\xdf\x17\x53\xaa\xd7\xe9\x60\x42\xc5\xd3\x5f\x7a\x70\x9a\x4e\x93\x9e\xda\xd9\xa5\x7f\x64\xf1\x01\xcb\x24\xde\xd2\x5d\x1c\x78\x6b\xa2\x23\xe1\x94\x3e\x11\x86\xf6\x63\x3f\xcf\x28\x08\x1b\x52\xb4\x39\xcd\xcc\xec\xc4\xd0\xbd\x1c\x47\x5b\x26\x61\x90\xb9\x00\x1c\x05\x2b\xb8\xad\x3b\x8b\x1b\x1e\x88\x19\x80\xa1\x19\x44\x60\x4f\x4c\x02\x4e\xb4\x1d\x27\xba\x39\xc3\x08\x5f\xb1\x38\x47\xd8\x20\x7c\x46\xb8\xb9\x6d\x9a\xdb\x34\x84\x4b\x84\x6b\x84\x6d\xaf\x63\xb0\x5b\x64\x04\xe0\xef\xaa\x39\xe7\x9d\x43\xde\x8e\xdb\x31\xe2\x9d\xa5\x50\x78\xfe\x2e\xb1\xc8\xbb\xe5\x51\x1f\xfb\xff\xc4\x50\x08\xef\x68\x41\x94\x25\xc2\x75\xaf\xa9\x07\x84\x2d\x6f\xf8\x81\xf0\xbb\xa9\x0c\x84\x37\x08\x6b\x84\xe7\x0d\x85\x20\x7c\xc1\x22\x47\xb8\xa8\x6a\x2b\xb5\xc2\x35\xac\x39\xed\x9a\x4f\xbe\x69\xe9\x86\x92\x15\xaf\x39\x5f\x83\x50\x69\x88\xb1\xf7\x5c\xec\x5b\x84\xab\x16\xaf\x2e\x2a\x82\x8a\x67\x08\x45\x3b\x56\xa5\x2e\xa6\xbc\x40\xf8\xc5\x79\xcf\xa9\x51\x72\x89\x8d\x1d\xa5\xec\x10\x7e\x72\xc8\x8b\xd8\xcf\x06\xad\x26\x44\x22\x4a\x7f\x1b\x94\x4a\x92\x08\x1f\x19\x58\x71\x40\x6a\x6e\xe0\x61\xf1\x94\x6a\x28\xf2\xbf\xc4\x8a\xf0\x8d\x1b\xbb\x96\xe4\xff\xdc\x17\xb5\x1c\x47\x6c\xc3\x9b\x3e\x94\x78\x14\x36\xdf\x61\x39\x1e\x37\xd4\xd1\x2a\x44\xec\x77\xf4\x88\xd6\xa9\x74\x4a\xbe\xaa\x01\xc9\xa2\x06\x5c\x71\xca\x5c\xd5\x0b\x2a\x5f\x01\x84\x57\x7c\x75\x5b\x19\xb8\x48\xa8\xbf\x08\x8c\xe6\xb1\xb0\x25\xdb\x97\x6c\xaf\xf9\x28\x79\xfb\xa5\x40\x78\x19\x6f\x65\xc9\x03\xd4\xe0\xd5\x9e\x0e\xbe\x95\xef\xb7\x05\xac\x3d\x25\x08\x9f\xb8\x1f\xdb\x2e\xee\x9f\x00\x00\x00\xff\xff\x03\x1a\xf5\x54\x2d\x07\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 1837, mode: os.FileMode(420), modTime: time.Unix(1555675826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yml": &bintree{configYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

