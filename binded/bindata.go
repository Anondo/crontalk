// Code generated by go-bindata.
// sources:
// config.yml
// assets/css/styles.css
// assets/index.html
// assets/js/translate.js
// DO NOT EDIT!

package binded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x6f\x1b\x37\x10\xbe\xfb\x57\x10\x3a\xf4\x18\x38\xe9\x2b\xd5\x2d\xa8\x13\x14\x01\x5c\x1f\x1c\x20\xe8\x49\xa0\xb4\xb4\xb4\xce\x8a\x14\xb8\x4b\x05\xba\xf5\x81\x56\x87\xa2\xe8\xc9\xe8\x03\x05\x8c\x00\x29\xd7\x71\x64\x27\xcd\xa1\x55\x81\x22\x39\xe8\x8f\xf0\xa7\x14\x33\x7c\xec\x92\x5a\x39\x97\xdd\x79\x7c\x33\x1c\x0e\xc9\x0f\x43\x67\xb3\xfe\x1e\x21\x33\x21\xab\x3e\xb9\xbb\xbf\x7f\x77\x8f\x90\x39\x93\x65\x2e\x78\x9f\xf4\xee\xdc\xba\x7d\x6b\xbf\xb7\x57\x50\x3e\x56\x74\xcc\x00\xc9\xf8\xb8\xc8\xcb\x09\x88\x84\xb0\x39\x93\x8b\x3e\xe9\xdd\x87\x3f\xe9\x35\xb6\xc1\x54\xf0\x6a\x32\x10\x27\xc1\x79\x08\x06\x72\x74\x12\xa1\x32\x0a\xd1\xc4\x22\x0e\xe8\xc2\xfa\x04\xe7\x04\xcc\x47\x9c\x78\x43\x3b\x1f\xd8\x93\x6c\xb4\x1a\xb8\x65\x73\xae\x2a\x06\xa0\x7b\x95\x4b\x7b\x88\xa6\x4e\xdc\x40\x9c\x0c\x26\x42\xc9\x0e\x3c\xe4\xfe\x42\x28\xe9\x16\xc8\xe8\x02\xc0\xd5\x84\x0d\x9e\x32\xf6\x04\x02\x0e\xe8\x02\x40\x8f\x26\x8c\x3c\x66\xec\xc9\x36\x10\x4b\x4e\x90\xb6\x6e\x0b\xf5\x5b\x42\xf0\x82\x51\x2c\x23\x6c\x0c\xd0\x5f\x31\x2a\xc3\x0e\x89\xab\xd2\xe9\x3c\x03\xfd\x03\xa7\x56\x02\xb4\x4a\x38\xf5\x44\x8a\x29\x18\xe0\xdf\x14\xe6\x6b\x71\xcb\x87\x56\xb9\x1d\x5b\xb3\xef\x47\x6b\xf3\xa5\xe2\x36\xfa\x18\x85\x50\xbd\x35\x1e\x8a\xc6\x58\x29\x56\x5a\xeb\x23\x2b\x59\xf3\x53\x96\x71\xef\x78\xec\x65\x17\x31\x51\xd2\x87\x38\xd1\x6f\x21\xb7\xe6\x07\x28\xb8\x4a\x68\xa5\xa4\xab\xc5\x89\xd6\x71\x4a\xb9\xa2\x78\x15\x1f\x5a\xc9\x25\x61\x43\xe9\xec\x0f\x9c\xe8\xaa\xa7\x72\x04\x67\x73\x08\x7f\xd7\xd1\x99\xcc\x8b\x3e\xe9\xdd\x83\xbf\x47\xe1\x06\xc3\x22\x8a\x43\xbf\x1e\x2a\xce\xbc\xa1\xc0\x25\x55\xe1\x10\x54\x8d\x55\x59\x41\x12\x14\x5c\xd1\x6c\x56\xb1\xe9\x90\x41\x5b\x8f\xbd\xec\x2e\xf6\xa8\x12\xd6\x71\x64\x25\x6b\xe6\x62\xee\x03\xbe\x74\xa2\x3b\x44\x36\xf2\x8e\x03\x27\x82\x63\x48\xf9\xb8\xa0\xf1\x93\x34\xfa\xd2\xd4\x3f\x19\xfd\xda\xe8\xe7\x46\xbf\xdb\xf5\x38\x53\x98\xd1\xd7\x46\xbf\x35\x7a\xdd\xef\x78\xa7\x09\xd8\x68\x8d\xdf\x8b\xf8\xd9\x76\xbe\xd9\x34\x6f\xc7\x8b\xed\x2c\x05\xd2\xe3\xf7\xdc\xd4\xcb\xee\xd7\xde\x7e\xc5\xef\xc9\x41\x8c\xfe\x15\x14\x80\x9c\x1b\xfd\xb6\xbf\xfb\x79\x1b\xbd\xc6\x82\x6d\xbe\xe7\x28\xff\x8b\x59\xce\x48\xd8\xf8\x0d\x8f\x3e\x6c\x78\x47\x4c\xe7\xeb\x37\x7a\x85\x41\xaf\x71\xd1\x7f\x42\xa8\x4b\x15\x73\x01\xe6\xbe\x36\xfa\x95\xd1\xff\xc5\xac\x60\xf4\xcf\x98\xe9\xdb\x88\x1d\x8c\xfe\xd3\xd4\x4b\xa3\xcf\x9a\x4e\x3a\x9e\x88\x18\x22\x14\xda\x4f\x79\x22\x69\x66\x3f\x26\x8c\xb4\xb5\x09\x77\xe0\x99\xac\x30\xd2\xed\x31\xe1\x11\xd8\x4e\xfd\x23\xae\x11\x01\x1a\x4e\x41\xdf\x6f\xb8\xc2\x2f\x46\xbf\x49\x70\x6d\x92\x01\x57\xfd\x8d\xd1\x75\x9a\xab\x61\x1b\x84\x7c\x87\x67\xba\xc6\x94\x97\xfe\x52\x47\x11\x81\x86\x8c\xfe\x1b\x53\x9e\xf9\xfb\x15\xc1\x5a\xc4\x04\x40\xd7\xa2\x08\xd2\x50\x94\xd1\x7f\xa0\xe3\x02\x13\xc2\xf1\xf9\x43\xff\x1a\x6a\xa8\x97\x5b\xe4\x65\xf4\x4b\x3c\xba\x95\x5b\xfc\xc6\x38\xcf\x6d\xfe\xda\xd8\xcb\xf4\x7b\xf0\x7b\xa2\xc3\x5b\x12\x9e\xcb\x3b\xe8\x68\x93\xc2\xf7\xdb\x5b\x1c\xf7\x41\xe9\xb0\xf8\x45\xcb\x51\x2c\x5a\x8e\x37\xb8\xe4\x92\xb4\x0b\x0a\xac\x68\xf4\x0f\x78\x74\x6b\x77\x4b\x3c\xa0\xcd\x90\xe8\x5d\xfa\xc2\xce\x51\xbe\x46\x79\x85\x5b\x59\xa6\xcc\x69\xf4\xf7\xfe\x54\xce\xf1\x02\x45\xb8\x16\x95\xe2\xa9\x5c\xed\x4a\xd8\xa2\x56\xa3\x9f\x61\x3f\xd6\xbb\xb0\xfb\x00\xaa\xb5\x55\x6e\xa3\x52\x5b\xe5\x0e\x2a\x8e\x10\x3f\x44\xe5\x85\x55\x3e\x42\xe5\xd2\x2a\x1f\xa3\xf2\xd2\x2a\x9f\xa0\xb2\xb2\xca\xa7\xa8\x5c\x59\xe5\x2e\x2a\xd7\x56\xf9\x0c\x95\x57\xa0\x94\x33\xca\xb7\x66\xb0\xcf\x69\x46\x77\xb1\x3c\xfa\xa6\xac\x24\x19\xeb\x9a\xbf\xd0\x9d\x6d\xae\x68\x4c\xe4\xc7\x62\x28\x59\x37\x9d\xdf\x2f\xe2\x74\x5d\x03\x18\x19\xe1\xaa\x60\x10\xef\x1f\xbf\xda\x68\xc8\x5b\x50\x32\x11\x92\xde\x30\x7f\x6d\xae\xa8\x03\x96\x6c\x4a\x79\x07\xb4\x99\xc0\x2c\xd6\x16\x7d\xd3\xf4\x85\x7b\x2a\x08\xdd\xfc\x25\x92\xc1\x2b\x66\xd8\x45\xc4\xac\x33\x1a\x0a\xf5\x93\x57\xc6\xca\xd0\x1c\x3f\x7a\x41\x11\x9d\xb3\x97\xd8\x9a\xbd\x42\xbe\xc0\x9f\x99\x98\xe6\x7c\x2c\x12\xd2\x2c\x14\x67\x65\xca\x93\x53\x2a\x2b\x6f\x6d\xb3\xe2\x34\xdf\xbc\x90\x23\x51\x84\x88\x86\x0d\x4f\x15\x9b\x7b\x73\xa0\xbc\x79\xce\x64\x48\xdf\x62\xb8\x72\xf3\x6c\x48\x33\x91\xd2\x1a\xe3\x4c\x8a\x2d\xea\x02\x31\xd8\x3d\x35\xe1\x9f\xc6\x74\x44\x87\xdb\x73\x97\x88\xc8\xe7\x54\xf1\x5c\x44\xac\x73\xaa\x0a\x6f\x09\x24\x43\xc7\xa2\xf4\x17\xae\x4d\x2c\x20\xe7\x6c\x3a\x94\x2c\x65\x10\x31\xaa\x54\x30\xb7\x08\x83\x8b\x79\x3b\xa0\xc5\x10\x59\x3e\xf2\x9e\xbd\xff\x03\x00\x00\xff\xff\x02\xc8\xbe\x4f\x42\x0d\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 3394, mode: os.FileMode(420), modTime: time.Unix(1617423131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\xae\xd3\x30\x10\xde\xe7\x14\xa3\x87\xd8\x51\x94\x34\x94\x85\xbb\xe3\x10\x6c\xd1\x38\x99\x24\x56\xdd\x99\xc8\x9e\x40\x1f\x88\xbb\x23\xc7\xa1\xb8\xa8\x4f\x02\x41\x97\x1e\xcf\xcf\xf7\x67\xa5\x7f\x86\x6f\x15\xc0\x19\xc3\xe8\xd8\xc0\xa1\x9e\x2f\xc7\x0a\xa0\x13\x2f\xc1\xc0\xab\xb6\x6d\xd3\x73\x10\xd6\xdd\x80\x67\xe7\x9f\x0d\x7c\xa4\xd0\x23\xe3\x1b\x88\xc8\x71\x17\x29\xb8\xe1\xda\x13\xdd\x57\x32\xd0\xbc\xcf\x5b\x2c\x76\xa7\x31\xc8\xc2\xfd\x6e\x5b\xf8\xc1\x63\x77\x3a\x56\xdf\xab\xa9\x49\x67\x95\x2e\xba\x43\xef\x46\x36\xd0\x11\x2b\x85\xf4\x57\xbd\xa5\xcb\x1c\x28\x46\x27\xfc\xc9\x2e\xd6\x7a\x5a\x41\xce\x12\x9d\x3a\x61\x03\x81\x3c\xaa\xfb\x4c\xe9\xc8\x17\xd7\xeb\x64\xa0\xdd\x6f\xd0\x27\x72\xe3\xa4\x06\x9a\xfd\x21\x15\xd2\x1c\xf6\xbd\xe3\xd1\x40\xb3\xb5\x58\x09\x3d\x85\x5d\xc0\xde\x2d\xd1\xc0\xa1\xac\x1a\x88\xe2\x5d\x0f\x3e\x6d\xb1\x7e\xa1\x5b\x22\xa6\xfc\xb8\x0b\xd5\x58\x1a\x24\x64\xc4\x9d\xb0\x12\xab\x79\x7a\x3a\xde\xe0\x47\x1b\xc5\x2f\xba\xee\x0e\x1b\xdc\xba\x7e\x9d\x9e\x2a\xb3\x81\xfd\x26\xe0\xc6\xad\x2e\x79\xd5\x2b\xa7\x8d\xc2\xda\xdd\xb4\xf3\x65\x43\xad\x01\x39\xce\x18\x88\xb5\x24\x9a\x27\xd3\xd6\xbb\xec\x72\x97\x15\x55\x39\xbf\xbc\xee\xbe\x31\xc9\x42\x0c\x84\xbf\x39\xe4\x78\xa2\xe0\xb4\x20\x51\x54\x7e\x52\x29\x4a\xa5\xc2\xd7\xf2\x6d\xaa\xde\xad\xee\x55\x45\x5a\x57\x5d\xae\xee\x96\xc2\x18\x60\xe1\x2c\x2f\xe5\xe9\xfc\xbe\xcf\x21\xce\xc8\x8f\xc0\x9f\xae\x29\xfa\xd3\x1f\x67\xb8\x7e\x31\xc3\x83\x17\x54\x93\xc3\x92\x45\x78\x68\xaa\x7f\xa1\xfe\xdb\x38\x7b\x1a\x1e\x9c\xe6\x7c\xe1\x3f\x84\xb9\xb0\xe6\xc1\x29\xfe\x97\xc0\xfe\x08\x00\x00\xff\xff\xef\x51\x4b\x97\xa4\x05\x00\x00")

func assetsCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssStylesCss,
		"assets/css/styles.css",
	)
}

func assetsCssStylesCss() (*asset, error) {
	bytes, err := assetsCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/styles.css", size: 1444, mode: os.FileMode(420), modTime: time.Unix(1559251031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x0c\x3e\x22\x1a\xab\xda\x0b\x5a\x39\xd1\xa2\xb2\x17\x2e\x20\xb5\x17\x4e\x68\xe2\x0c\x8d\x83\x63\x07\xcf\x34\xdb\x68\xd9\xff\x8e\x12\xa7\x68\x97\x0f\xa1\x1c\x92\x79\x6f\xe6\xbd\xc9\xb3\xcd\xab\xf7\x1f\xf7\xc7\xcf\x9f\xee\xa1\x95\xde\x57\x9b\x8d\x99\xdf\xe0\x31\x9c\x4a\x45\x41\x55\x9b\x0d\x80\x69\x09\x9b\x6a\x03\x00\x60\x7a\x12\x04\xdb\x62\x62\x92\x52\x9d\xe5\xeb\xf6\xad\xd2\xcf\xb9\x80\x3d\x95\x6a\x74\xf4\x30\xc4\x24\x0a\x6c\x0c\x42\x41\x4a\xf5\xe0\x1a\x69\xcb\x86\x46\x67\x69\xbb\x14\x6f\xc0\x05\x27\x0e\xfd\x96\x2d\x7a\x2a\x77\xd9\x0e\xc0\x88\x13\x4f\xd5\x3e\xc5\x20\xe8\xbf\x19\x9d\xeb\xcc\xb1\x4d\x6e\x10\xe0\x64\x4b\xd5\x8a\x0c\x7c\xab\x35\x76\x78\x29\x4e\x31\x9e\x3c\xe1\xe0\xb8\xb0\xb1\x5f\x30\xed\x5d\xcd\xba\xfb\x7e\xa6\x34\xe9\x9b\xe2\xa6\xd8\xad\x45\xd1\xbb\x50\x74\xac\x2a\xa3\xb3\xde\x4b\x71\x99\x06\x2a\x95\xd0\x45\x74\x87\x23\x66\x54\x55\x77\x8f\x8f\x50\xbc\x63\x26\xe1\xe2\x98\x30\xb0\x47\xa1\x0f\x07\xf8\x01\x1d\xc3\xd3\xd3\xdd\xef\x62\x32\x79\x7a\x31\x74\x98\x11\xde\x1f\xe6\x11\xcb\xd7\x99\xa5\x6d\xce\x59\xe7\xa0\xe7\xcf\x3a\x36\xd3\x2a\xd3\xee\x96\x24\x8e\x4b\x12\xed\x6e\x45\x1b\x37\x82\xf5\xc8\x5c\x2a\xba\x0c\x89\x98\x5d\x0c\x5f\xea\x73\x5d\x7b\x52\xb9\x67\x5e\x61\xc0\x50\xdd\xff\xe2\x6f\x8d\x5e\x90\x2b\x3d\xff\x21\x26\x42\x70\xcd\x73\x19\x55\xbd\x86\xf5\x31\xfa\xda\xb3\xfa\xea\xc6\x8d\x7f\xae\x30\x1f\xd3\x5f\xbd\xaf\x31\xfd\xcf\x3c\x11\x9f\xbd\x28\x48\x84\x4d\x0c\x7e\xaa\xfe\x61\xbc\x84\xa3\x73\x3a\x46\xe7\x4b\xfb\x33\x00\x00\xff\xff\x3f\x0d\x7e\x7d\xc5\x02\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 709, mode: os.FileMode(420), modTime: time.Unix(1559251031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsTranslateJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xbd\x6e\x2a\x31\x10\x85\xfb\x7d\x8a\xd1\x5e\x24\x6c\xc9\xf2\x52\x22\x10\xfd\x55\x8a\x44\x0a\x14\x69\x9d\x65\x08\x0e\xce\x78\x33\x1e\x13\x10\xe2\xdd\xa3\xfd\x01\x14\x85\x2a\x8d\x5d\x9c\x99\xef\x3b\xf6\xde\x31\x64\x0e\xb0\x80\x72\x2b\xd2\xcc\xaa\x2a\xc4\xda\x85\x6d\x4c\x32\x9b\x4e\x26\xd3\xaa\xe6\x48\xe2\xc2\xae\x12\x76\x94\x82\x13\x2c\xe7\x45\x31\x52\xeb\x58\xe7\x0f\x24\xd1\x96\xd1\xad\x8f\x6a\x93\xa9\x16\x1f\x49\xe9\x53\x01\x30\x52\xe5\x3f\x3c\x34\x8c\x29\xf9\x48\xa5\xb6\x99\x5e\x3d\xad\x95\x9e\xdf\x0b\xbb\xa8\xdc\xe1\x31\x37\xa5\xf9\x09\x02\x68\x1b\xb6\xd3\xb0\xf8\xbd\xb8\x77\xa1\x47\x02\x8c\x6c\x13\x93\xa8\xf6\x2d\x06\x1e\x96\x4f\x8f\x36\x09\x7b\x7a\xf3\x9b\xa3\x3a\xdd\x96\x66\x1d\xeb\xac\xc1\xc0\x55\xc4\x98\x9a\x48\x09\xc1\x40\x12\x27\x39\x0d\xe6\xbe\x29\x63\xca\x41\x06\xd9\x78\x3c\xe8\xee\x64\x17\xcc\x30\x71\xd6\x76\xe3\x7c\xb8\x7d\xcc\xfb\xe7\xcb\xff\x67\x30\x20\x78\x90\x65\xe7\x01\x03\xc8\x1c\x79\xb5\xe5\xf8\x45\x7f\xb3\x76\x54\x7b\x71\xaf\xf0\x20\x57\x7f\x7b\xf7\x27\xa3\x64\xa6\x79\x71\xd6\xc5\x77\x00\x00\x00\xff\xff\x39\xd9\xa8\x21\xf1\x01\x00\x00")

func assetsJsTranslateJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsTranslateJs,
		"assets/js/translate.js",
	)
}

func assetsJsTranslateJs() (*asset, error) {
	bytes, err := assetsJsTranslateJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/translate.js", size: 497, mode: os.FileMode(420), modTime: time.Unix(1559251031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
	"assets/css/styles.css": assetsCssStylesCss,
	"assets/index.html": assetsIndexHtml,
	"assets/js/translate.js": assetsJsTranslateJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{assetsCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"translate.js": &bintree{assetsJsTranslateJs, map[string]*bintree{}},
		}},
	}},
	"config.yml": &bintree{configYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

