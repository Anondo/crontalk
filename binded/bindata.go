// Code generated by go-bindata.
// sources:
// config.yml
// assets/css/styles.css
// assets/index.html
// assets/js/translate.js
// DO NOT EDIT!

package binded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4b\x4b\x1c\x41\x10\xbe\xef\xaf\x68\xf6\x90\xa3\x6c\xcc\xcb\xcc\x4d\x30\x12\x84\x8d\x07\x05\xc9\x69\x69\xdd\xde\x47\x5c\x7b\x96\xd9\x19\x65\x6f\x79\x90\xec\x21\x84\x9c\x24\x0f\x02\x4b\xc0\xf4\x18\x5d\x57\xf1\x90\x6c\x20\xe8\x5f\xa9\x9f\x12\xaa\xba\x7a\x5e\xce\x9a\xcb\x4c\x3d\xbe\xaa\xae\xaa\xee\xfa\x64\xbf\xef\x55\x84\xe8\xfb\x41\xe8\x89\xa5\x5a\x6d\xa9\x22\xc4\xbe\x0a\x06\x5d\x5f\x7b\xa2\xba\xb8\x50\x5b\xa8\x55\x2b\x3d\xa9\xdb\x91\x6c\x2b\x44\x2a\xdd\xee\x75\x07\x1d\x14\x85\x50\xfb\x2a\x18\x7a\xa2\xfa\x04\xff\xa2\x9a\xda\x1a\x7b\xbe\x0e\x3b\x0d\xbf\x95\x38\xeb\x68\x10\xeb\xad\x1c\xaa\x29\x31\x5a\x58\xc4\x8a\x1c\x5a\x9f\xaf\xb5\x40\xf3\xba\x16\xce\x90\xcd\x87\xf6\x42\x36\x19\x36\xf8\xd8\xae\x8e\x42\x85\xa0\xe5\x90\xd3\xd6\xc9\x54\x8a\x6b\xf8\xad\x46\xc7\x8f\x82\x12\x3c\xe6\x7e\xea\x47\x01\x1f\xd0\x94\x43\x04\x87\x1d\xd5\x38\x50\x6a\x17\x03\x56\xe4\x10\x41\x9b\x1d\x25\xb6\x94\xda\xbd\x09\xa4\x92\x0b\x48\x5b\xb7\x85\xba\x96\x08\x3c\x54\x92\xca\x48\x1a\x43\xf4\x73\x25\x83\xa4\x43\xc1\x55\xb2\xae\x9b\xa8\xdf\x61\x35\xf4\x51\x0b\x7d\x56\x5b\x81\xbf\x87\x06\xfc\xa7\x85\xb9\x5a\xf8\xf8\x64\x54\xdc\xb1\x35\xbb\x79\x64\x9a\x1f\x44\xda\x46\x6f\x90\x90\x54\x6f\x8d\x75\x3f\x35\x86\x91\x1a\x58\xeb\xa6\x95\xac\xf9\x40\x35\xb5\x73\x6c\x39\x99\x23\x3a\x51\xe0\x42\x58\x74\x2d\x74\xad\x79\x95\x04\xae\x44\x86\x51\xc0\xb5\xb0\x68\x1d\x2f\xa4\x8e\x24\x3d\xc5\x35\x2b\x71\x12\xb5\x1d\xb0\x7d\x95\x45\xae\x5e\x06\x3b\x78\x37\x75\xfc\xf3\x44\xfb\x41\xb7\xe7\x89\xea\x32\xfe\x1d\x8a\x1a\x4c\x0e\x89\x34\xce\x6b\x2d\xd2\xca\x19\x7a\x74\x64\xd4\x63\x84\x8c\xda\xd1\x20\xc4\x24\x24\x70\xd1\xaa\x1f\xaa\xbd\x6d\x85\x63\xdd\x70\x32\x3f\xec\x9d\xd0\xb7\x8e\x75\x2b\x59\xb3\xf6\xf7\x5d\xc0\x33\x16\xf9\x12\xd5\x8e\x73\xac\xb0\x88\x8e\x6d\xa9\xdb\x3d\x99\x5f\x49\x30\x27\x10\x7f\x00\x73\x01\xe6\x08\xcc\xf5\xbc\xe5\x2c\xc2\xc0\x4c\xc1\x5c\x81\x99\x79\x25\x7b\x5a\x00\x83\x31\xf4\x3d\xce\xaf\x6d\xe9\xce\x16\xf3\x96\x6c\x6c\x69\x29\x98\x9e\xbe\x63\x88\x47\xe5\xdb\x9e\xdd\xe2\xff\xe4\x10\x60\x3e\xa3\x82\x90\x31\x98\x2b\x6f\xfe\x7a\x83\x99\x51\xc1\x36\xdf\x11\xc9\x7f\x28\xcb\xa1\x48\x1a\xbf\x65\xe9\x93\x86\xe7\xc4\x94\x6e\x3f\x98\x09\x05\x5d\xd0\xa1\xbf\x93\x50\x4e\x95\xe7\x02\xca\x3d\x05\x73\x0e\xe6\x6f\x9e\x15\xc0\x7c\xa4\x4c\xaf\x73\xec\x00\xe6\x07\xc4\x23\x30\x87\xe9\x24\x99\x27\x72\x0c\x91\x14\xea\x15\x79\xa2\x30\x4c\x2f\x4f\x18\xc5\xd1\x16\xb8\x83\xee\x64\x42\x91\xdc\x63\x81\x47\xb0\x9d\xf8\x3d\x9d\x91\x03\xa4\x9c\x42\xbe\x2f\x74\xc2\x27\x30\x97\x05\x5c\x96\x64\xd0\x15\xbf\x02\x13\x17\x73\xa5\x6c\x43\x90\x37\x74\xa7\x33\x4a\x79\xe2\x1e\x75\x2e\x22\xa1\x21\x30\xbf\x28\xe5\xa1\x7b\x5f\x39\x58\x86\x98\x10\xc8\x23\xca\x41\x52\x8a\x02\xf3\x8d\x1c\xc7\x94\x10\xaf\xcf\x5d\xfa\x4b\xac\x21\x1e\xdd\x20\x2f\x30\xa7\x74\x75\x13\x3e\xfc\xd6\x38\xc7\x6d\xee\xd9\xd8\xc7\xf4\x35\xf1\x3b\xa2\xa3\x57\x92\xac\xcb\x35\x4e\x34\x4d\xe1\xe6\xed\x2c\xcc\x7d\x58\x3a\x1e\x7e\x9c\x71\xf4\x86\x19\xc7\x25\x1d\x39\x12\xd9\x82\x12\x56\x04\xf3\x8e\xae\x6e\xc6\xaf\xc4\x01\xb2\x0c\x49\xde\x91\x2b\x6c\x4c\xf2\x94\xe4\x09\xb5\x32\x2a\x32\x27\x98\xb7\xee\x56\xc6\xf4\x80\x72\xb8\x0c\x95\xd2\xad\x9c\xcd\x4b\x98\xa1\x56\x30\xdf\x69\x1e\xb3\x79\xd8\x1a\x82\x62\x63\x95\xbb\xa4\xc4\x56\x59\x24\x85\x09\xf1\x1e\x29\x3f\xad\x72\x9f\x94\x13\xab\x3c\x20\xe5\xd4\x2a\x0f\x49\x99\x58\xe5\x11\x29\x67\x56\x59\x22\x65\x6a\x95\xc7\xa4\x9c\x57\x2b\xff\x02\x00\x00\xff\xff\x10\xd1\xdb\xa0\xb3\x09\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 2483, mode: os.FileMode(420), modTime: time.Unix(1559120326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\xae\xd3\x30\x10\xde\xe7\x14\xa3\x87\xd8\x51\x94\x34\x94\x85\xbb\xe3\x10\x6c\xd1\x38\x99\x24\x56\xdd\x99\xc8\x9e\x40\x1f\x88\xbb\x23\xc7\xa1\xb8\xa8\x4f\x02\x41\x97\x1e\xcf\xcf\xf7\x67\xa5\x7f\x86\x6f\x15\xc0\x19\xc3\xe8\xd8\xc0\xa1\x9e\x2f\xc7\x0a\xa0\x13\x2f\xc1\xc0\xab\xb6\x6d\xd3\x73\x10\xd6\xdd\x80\x67\xe7\x9f\x0d\x7c\xa4\xd0\x23\xe3\x1b\x88\xc8\x71\x17\x29\xb8\xe1\xda\x13\xdd\x57\x32\xd0\xbc\xcf\x5b\x2c\x76\xa7\x31\xc8\xc2\xfd\x6e\x5b\xf8\xc1\x63\x77\x3a\x56\xdf\xab\xa9\x49\x67\x95\x2e\xba\x43\xef\x46\x36\xd0\x11\x2b\x85\xf4\x57\xbd\xa5\xcb\x1c\x28\x46\x27\xfc\xc9\x2e\xd6\x7a\x5a\x41\xce\x12\x9d\x3a\x61\x03\x81\x3c\xaa\xfb\x4c\xe9\xc8\x17\xd7\xeb\x64\xa0\xdd\x6f\xd0\x27\x72\xe3\xa4\x06\x9a\xfd\x21\x15\xd2\x1c\xf6\xbd\xe3\xd1\x40\xb3\xb5\x58\x09\x3d\x85\x5d\xc0\xde\x2d\xd1\xc0\xa1\xac\x1a\x88\xe2\x5d\x0f\x3e\x6d\xb1\x7e\xa1\x5b\x22\xa6\xfc\xb8\x0b\xd5\x58\x1a\x24\x64\xc4\x9d\xb0\x12\xab\x79\x7a\x3a\xde\xe0\x47\x1b\xc5\x2f\xba\xee\x0e\x1b\xdc\xba\x7e\x9d\x9e\x2a\xb3\x81\xfd\x26\xe0\xc6\xad\x2e\x79\xd5\x2b\xa7\x8d\xc2\xda\xdd\xb4\xf3\x65\x43\xad\x01\x39\xce\x18\x88\xb5\x24\x9a\x27\xd3\xd6\xbb\xec\x72\x97\x15\x55\x39\xbf\xbc\xee\xbe\x31\xc9\x42\x0c\x84\xbf\x39\xe4\x78\xa2\xe0\xb4\x20\x51\x54\x7e\x52\x29\x4a\xa5\xc2\xd7\xf2\x6d\xaa\xde\xad\xee\x55\x45\x5a\x57\x5d\xae\xee\x96\xc2\x18\x60\xe1\x2c\x2f\xe5\xe9\xfc\xbe\xcf\x21\xce\xc8\x8f\xc0\x9f\xae\x29\xfa\xd3\x1f\x67\xb8\x7e\x31\xc3\x83\x17\x54\x93\xc3\x92\x45\x78\x68\xaa\x7f\xa1\xfe\xdb\x38\x7b\x1a\x1e\x9c\xe6\x7c\xe1\x3f\x84\xb9\xb0\xe6\xc1\x29\xfe\x97\xc0\xfe\x08\x00\x00\xff\xff\xef\x51\x4b\x97\xa4\x05\x00\x00")

func assetsCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssStylesCss,
		"assets/css/styles.css",
	)
}

func assetsCssStylesCss() (*asset, error) {
	bytes, err := assetsCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/styles.css", size: 1444, mode: os.FileMode(420), modTime: time.Unix(1558602511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x0c\x3e\x22\x1a\xab\xda\x0b\x5a\x39\xd1\xa2\xb2\x17\x2e\x20\xb5\x17\x4e\x68\xe2\x0c\x8d\x83\x63\x07\xcf\x34\xdb\x68\xd9\xff\x8e\x12\xa7\x68\x97\x0f\xa1\x1c\x92\x79\x6f\xe6\xbd\xc9\xb3\xcd\xab\xf7\x1f\xf7\xc7\xcf\x9f\xee\xa1\x95\xde\x57\x9b\x8d\x99\xdf\xe0\x31\x9c\x4a\x45\x41\x55\x9b\x0d\x80\x69\x09\x9b\x6a\x03\x00\x60\x7a\x12\x04\xdb\x62\x62\x92\x52\x9d\xe5\xeb\xf6\xad\xd2\xcf\xb9\x80\x3d\x95\x6a\x74\xf4\x30\xc4\x24\x0a\x6c\x0c\x42\x41\x4a\xf5\xe0\x1a\x69\xcb\x86\x46\x67\x69\xbb\x14\x6f\xc0\x05\x27\x0e\xfd\x96\x2d\x7a\x2a\x77\xd9\x0e\xc0\x88\x13\x4f\xd5\x3e\xc5\x20\xe8\xbf\x19\x9d\xeb\xcc\xb1\x4d\x6e\x10\xe0\x64\x4b\xd5\x8a\x0c\x7c\xab\x35\x76\x78\x29\x4e\x31\x9e\x3c\xe1\xe0\xb8\xb0\xb1\x5f\x30\xed\x5d\xcd\xba\xfb\x7e\xa6\x34\xe9\x9b\xe2\xa6\xd8\xad\x45\xd1\xbb\x50\x74\xac\x2a\xa3\xb3\xde\x4b\x71\x99\x06\x2a\x95\xd0\x45\x74\x87\x23\x66\x54\x55\x77\x8f\x8f\x50\xbc\x63\x26\xe1\xe2\x98\x30\xb0\x47\xa1\x0f\x07\xf8\x01\x1d\xc3\xd3\xd3\xdd\xef\x62\x32\x79\x7a\x31\x74\x98\x11\xde\x1f\xe6\x11\xcb\xd7\x99\xa5\x6d\xce\x59\xe7\xa0\xe7\xcf\x3a\x36\xd3\x2a\xd3\xee\x96\x24\x8e\x4b\x12\xed\x6e\x45\x1b\x37\x82\xf5\xc8\x5c\x2a\xba\x0c\x89\x98\x5d\x0c\x5f\xea\x73\x5d\x7b\x52\xb9\x67\x5e\x61\xc0\x50\xdd\xff\xe2\x6f\x8d\x5e\x90\x2b\x3d\xff\x21\x26\x42\x70\xcd\x73\x19\x55\xbd\x86\xf5\x31\xfa\xda\xb3\xfa\xea\xc6\x8d\x7f\xae\x30\x1f\xd3\x5f\xbd\xaf\x31\xfd\xcf\x3c\x11\x9f\xbd\x28\x48\x84\x4d\x0c\x7e\xaa\xfe\x61\xbc\x84\xa3\x73\x3a\x46\xe7\x4b\xfb\x33\x00\x00\xff\xff\x3f\x0d\x7e\x7d\xc5\x02\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 709, mode: os.FileMode(420), modTime: time.Unix(1558602511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsTranslateJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xbd\x6e\x2a\x31\x10\x85\xfb\x7d\x8a\xd1\x5e\x24\x6c\xc9\xf2\x52\x22\x10\xfd\x55\x8a\x44\x0a\x14\x69\x9d\x65\x08\x0e\xce\x78\x33\x1e\x13\x10\xe2\xdd\xa3\xfd\x01\x14\x85\x2a\x8d\x5d\x9c\x99\xef\x3b\xf6\xde\x31\x64\x0e\xb0\x80\x72\x2b\xd2\xcc\xaa\x2a\xc4\xda\x85\x6d\x4c\x32\x9b\x4e\x26\xd3\xaa\xe6\x48\xe2\xc2\xae\x12\x76\x94\x82\x13\x2c\xe7\x45\x31\x52\xeb\x58\xe7\x0f\x24\xd1\x96\xd1\xad\x8f\x6a\x93\xa9\x16\x1f\x49\xe9\x53\x01\x30\x52\xe5\x3f\x3c\x34\x8c\x29\xf9\x48\xa5\xb6\x99\x5e\x3d\xad\x95\x9e\xdf\x0b\xbb\xa8\xdc\xe1\x31\x37\xa5\xf9\x09\x02\x68\x1b\xb6\xd3\xb0\xf8\xbd\xb8\x77\xa1\x47\x02\x8c\x6c\x13\x93\xa8\xf6\x2d\x06\x1e\x96\x4f\x8f\x36\x09\x7b\x7a\xf3\x9b\xa3\x3a\xdd\x96\x66\x1d\xeb\xac\xc1\xc0\x55\xc4\x98\x9a\x48\x09\xc1\x40\x12\x27\x39\x0d\xe6\xbe\x29\x63\xca\x41\x06\xd9\x78\x3c\xe8\xee\x64\x17\xcc\x30\x71\xd6\x76\xe3\x7c\xb8\x7d\xcc\xfb\xe7\xcb\xff\x67\x30\x20\x78\x90\x65\xe7\x01\x03\xc8\x1c\x79\xb5\xe5\xf8\x45\x7f\xb3\x76\x54\x7b\x71\xaf\xf0\x20\x57\x7f\x7b\xf7\x27\xa3\x64\xa6\x79\x71\xd6\xc5\x77\x00\x00\x00\xff\xff\x39\xd9\xa8\x21\xf1\x01\x00\x00")

func assetsJsTranslateJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsTranslateJs,
		"assets/js/translate.js",
	)
}

func assetsJsTranslateJs() (*asset, error) {
	bytes, err := assetsJsTranslateJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/translate.js", size: 497, mode: os.FileMode(420), modTime: time.Unix(1558602511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
	"assets/css/styles.css": assetsCssStylesCss,
	"assets/index.html": assetsIndexHtml,
	"assets/js/translate.js": assetsJsTranslateJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{assetsCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"translate.js": &bintree{assetsJsTranslateJs, map[string]*bintree{}},
		}},
	}},
	"config.yml": &bintree{configYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

